// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ImpactReporting.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmImpactReportingModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="ImpactReporting.WorkloadImpactData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="ImpactReporting.WorkloadImpactData"/> instance for mocking. </returns>
        public static WorkloadImpactData WorkloadImpactData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, WorkloadImpactProperties properties = null)
        {
            return new WorkloadImpactData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.WorkloadImpactProperties"/>. </summary>
        /// <param name="provisioningState"> Resource provisioning state. </param>
        /// <param name="startOn"> Time at which impact was observed. </param>
        /// <param name="endOn"> Time at which impact has ended. </param>
        /// <param name="impactedResourceId"> Azure resource id of the impacted resource. </param>
        /// <param name="impactUniqueId"> Unique ID of the impact (UUID). </param>
        /// <param name="reportedTimeUtc"> Time at which impact is reported. </param>
        /// <param name="impactCategory"> Category of the impact,  details can found from /impactCategories API. </param>
        /// <param name="impactDescription"> A detailed description of the impact. </param>
        /// <param name="armCorrelationIds"> The ARM correlation ids, this is important field for control plane related impacts. </param>
        /// <param name="performance"> Details about performance issue. Applicable for performance impacts. </param>
        /// <param name="connectivity"> Details about connectivity issue. Applicable when root resource causing the issue is not identified. For example, when a VM is impacted due to a network issue, the impacted resource is identified as the VM, but the root cause is the network. In such cases, the connectivity field will have the details about the network issue. </param>
        /// <param name="additionalProperties"> Additional fields related to impact, applicable fields per resource type are list under /impactCategories API. </param>
        /// <param name="errorDetails"> ARM error code and error message associated with the impact. </param>
        /// <param name="workload"> Information about the impacted workload. </param>
        /// <param name="impactGroupId"> Use this field to group impacts. </param>
        /// <param name="confidenceLevel"> Degree of confidence on the impact being a platform issue. </param>
        /// <param name="clientIncidentDetails"> Client incident details ex: incidentId , incident source. </param>
        /// <returns> A new <see cref="Models.WorkloadImpactProperties"/> instance for mocking. </returns>
        public static WorkloadImpactProperties WorkloadImpactProperties(ImpactReportingProvisioningState? provisioningState = null, DateTimeOffset startOn = default, DateTimeOffset? endOn = null, ResourceIdentifier impactedResourceId = null, string impactUniqueId = null, DateTimeOffset? reportedTimeUtc = null, string impactCategory = null, string impactDescription = null, IEnumerable<string> armCorrelationIds = null, IEnumerable<ImpactPerformance> performance = null, ImpactConnectivityDetails connectivity = null, IDictionary<string, BinaryData> additionalProperties = null, ImpactErrorDetails errorDetails = null, ImpactedWorkload workload = null, string impactGroupId = null, ImpactConfidenceLevel? confidenceLevel = null, ImpactClientIncidentDetails clientIncidentDetails = null)
        {
            armCorrelationIds ??= new List<string>();
            performance ??= new List<ImpactPerformance>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new WorkloadImpactProperties(
                provisioningState,
                startOn,
                endOn,
                impactedResourceId,
                impactUniqueId,
                reportedTimeUtc,
                impactCategory,
                impactDescription,
                armCorrelationIds?.ToList(),
                performance?.ToList(),
                connectivity,
                additionalProperties,
                errorDetails,
                workload,
                impactGroupId,
                confidenceLevel,
                clientIncidentDetails,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ImpactReporting.ImpactCategoryData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="ImpactReporting.ImpactCategoryData"/> instance for mocking. </returns>
        public static ImpactCategoryData ImpactCategoryData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ImpactCategoryProperties properties = null)
        {
            return new ImpactCategoryData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ImpactCategoryProperties"/>. </summary>
        /// <param name="provisioningState"> Resource provisioning state. </param>
        /// <param name="categoryId"> Unique ID of the category. </param>
        /// <param name="parentCategoryId"> Unique ID of the parent category. </param>
        /// <param name="description"> Description of the category. </param>
        /// <param name="requiredImpactProperties"> The workloadImpact properties which are required when reporting with the impact category. </param>
        /// <returns> A new <see cref="Models.ImpactCategoryProperties"/> instance for mocking. </returns>
        public static ImpactCategoryProperties ImpactCategoryProperties(ImpactReportingProvisioningState? provisioningState = null, string categoryId = null, string parentCategoryId = null, string description = null, IEnumerable<RequiredImpactProperties> requiredImpactProperties = null)
        {
            requiredImpactProperties ??= new List<RequiredImpactProperties>();

            return new ImpactCategoryProperties(
                provisioningState,
                categoryId,
                parentCategoryId,
                description,
                requiredImpactProperties?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RequiredImpactProperties"/>. </summary>
        /// <param name="name"> Name of the property. </param>
        /// <param name="allowedValues"> Allowed values values for the property. </param>
        /// <returns> A new <see cref="Models.RequiredImpactProperties"/> instance for mocking. </returns>
        public static RequiredImpactProperties RequiredImpactProperties(string name = null, IEnumerable<string> allowedValues = null)
        {
            allowedValues ??= new List<string>();

            return new RequiredImpactProperties(name, allowedValues?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ImpactReporting.ImpactInsightData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="ImpactReporting.ImpactInsightData"/> instance for mocking. </returns>
        public static ImpactInsightData ImpactInsightData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ImpactInsightProperties properties = null)
        {
            return new ImpactInsightData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ImpactInsightProperties"/>. </summary>
        /// <param name="provisioningState"> Resource provisioning state. </param>
        /// <param name="category"> category of the insight. </param>
        /// <param name="status"> status of the insight. example resolved, repaired, other. </param>
        /// <param name="eventId"> Identifier of the event that has been correlated with this insight. This can be used to aggregate insights for the same event. </param>
        /// <param name="groupId"> Identifier that can be used to group similar insights. </param>
        /// <param name="content"> Contains title &amp; description for the insight. </param>
        /// <param name="eventOn"> Time of the event, which has been correlated the impact. </param>
        /// <param name="insightUniqueId"> unique id of the insight. </param>
        /// <param name="impact"> details of of the impact for which insight has been generated. </param>
        /// <param name="additionalDetails"> additional details of the insight. </param>
        /// <returns> A new <see cref="Models.ImpactInsightProperties"/> instance for mocking. </returns>
        public static ImpactInsightProperties ImpactInsightProperties(ImpactReportingProvisioningState? provisioningState = null, string category = null, string status = null, string eventId = null, string groupId = null, ImpactInsightContent content = null, DateTimeOffset? eventOn = null, string insightUniqueId = null, ImpactDetails impact = null, IDictionary<string, BinaryData> additionalDetails = null)
        {
            additionalDetails ??= new Dictionary<string, BinaryData>();

            return new ImpactInsightProperties(
                provisioningState,
                category,
                status,
                eventId,
                groupId,
                content,
                eventOn,
                insightUniqueId,
                impact,
                additionalDetails,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ImpactReporting.ImpactConnectorData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="ImpactReporting.ImpactConnectorData"/> instance for mocking. </returns>
        public static ImpactConnectorData ImpactConnectorData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ImpactConnectorProperties properties = null)
        {
            return new ImpactConnectorData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ImpactConnectorProperties"/>. </summary>
        /// <param name="provisioningState"> Resource provisioning state. </param>
        /// <param name="connectorId"> unique id of the connector. </param>
        /// <param name="tenantId"> tenant id of this connector. </param>
        /// <param name="connectorType"> connector type. </param>
        /// <param name="lastRanOn"> last run time stamp of this connector in UTC time zone. </param>
        /// <returns> A new <see cref="Models.ImpactConnectorProperties"/> instance for mocking. </returns>
        public static ImpactConnectorProperties ImpactConnectorProperties(ImpactReportingProvisioningState? provisioningState = null, string connectorId = null, string tenantId = null, ImpactConnectorType connectorType = default, DateTimeOffset lastRanOn = default)
        {
            return new ImpactConnectorProperties(
                provisioningState,
                connectorId,
                tenantId,
                connectorType,
                lastRanOn,
                serializedAdditionalRawData: null);
        }
    }
}
