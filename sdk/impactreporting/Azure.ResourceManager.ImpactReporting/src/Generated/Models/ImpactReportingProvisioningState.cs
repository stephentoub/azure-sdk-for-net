// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ImpactReporting.Models
{
    /// <summary> Provisioning state of the resource. </summary>
    public readonly partial struct ImpactReportingProvisioningState : IEquatable<ImpactReportingProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ImpactReportingProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ImpactReportingProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CanceledValue = "Canceled";

        /// <summary> Provisioning Succeeded. </summary>
        public static ImpactReportingProvisioningState Succeeded { get; } = new ImpactReportingProvisioningState(SucceededValue);
        /// <summary> Provisioning Failed. </summary>
        public static ImpactReportingProvisioningState Failed { get; } = new ImpactReportingProvisioningState(FailedValue);
        /// <summary> Provisioning Canceled. </summary>
        public static ImpactReportingProvisioningState Canceled { get; } = new ImpactReportingProvisioningState(CanceledValue);
        /// <summary> Determines if two <see cref="ImpactReportingProvisioningState"/> values are the same. </summary>
        public static bool operator ==(ImpactReportingProvisioningState left, ImpactReportingProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ImpactReportingProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(ImpactReportingProvisioningState left, ImpactReportingProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ImpactReportingProvisioningState"/>. </summary>
        public static implicit operator ImpactReportingProvisioningState(string value) => new ImpactReportingProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ImpactReportingProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ImpactReportingProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
