// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ImpactReporting.Models
{
    /// <summary> List of protocols. </summary>
    public readonly partial struct ImpactProtocol : IEquatable<ImpactProtocol>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ImpactProtocol"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ImpactProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TcpValue = "TCP";
        private const string UdpValue = "UDP";
        private const string HttpValue = "HTTP";
        private const string HttpsValue = "HTTPS";
        private const string RdpValue = "RDP";
        private const string FtpValue = "FTP";
        private const string SshValue = "SSH";
        private const string OtherValue = "Other";

        /// <summary> When communication protocol is TCP. </summary>
        public static ImpactProtocol Tcp { get; } = new ImpactProtocol(TcpValue);
        /// <summary> When communication protocol is UDP. </summary>
        public static ImpactProtocol Udp { get; } = new ImpactProtocol(UdpValue);
        /// <summary> When communication protocol is HTTP. </summary>
        public static ImpactProtocol Http { get; } = new ImpactProtocol(HttpValue);
        /// <summary> When communication protocol is HTTPS. </summary>
        public static ImpactProtocol Https { get; } = new ImpactProtocol(HttpsValue);
        /// <summary> When communication protocol is RDP. </summary>
        public static ImpactProtocol Rdp { get; } = new ImpactProtocol(RdpValue);
        /// <summary> When communication protocol is FTP. </summary>
        public static ImpactProtocol Ftp { get; } = new ImpactProtocol(FtpValue);
        /// <summary> When communication protocol is SSH. </summary>
        public static ImpactProtocol Ssh { get; } = new ImpactProtocol(SshValue);
        /// <summary> When communication protocol is Other. </summary>
        public static ImpactProtocol Other { get; } = new ImpactProtocol(OtherValue);
        /// <summary> Determines if two <see cref="ImpactProtocol"/> values are the same. </summary>
        public static bool operator ==(ImpactProtocol left, ImpactProtocol right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ImpactProtocol"/> values are not the same. </summary>
        public static bool operator !=(ImpactProtocol left, ImpactProtocol right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ImpactProtocol"/>. </summary>
        public static implicit operator ImpactProtocol(string value) => new ImpactProtocol(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ImpactProtocol other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ImpactProtocol other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
