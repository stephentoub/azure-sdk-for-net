// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ImpactReporting.Models
{
    /// <summary> List of incident interfaces. </summary>
    public readonly partial struct ImpactIncidentSource : IEquatable<ImpactIncidentSource>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ImpactIncidentSource"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ImpactIncidentSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AzureDevopsValue = "AzureDevops";
        private const string IcmValue = "ICM";
        private const string JiraValue = "Jira";
        private const string ServiceNowValue = "ServiceNow";
        private const string OtherValue = "Other";

        /// <summary> When source of Incident is AzureDevops. </summary>
        public static ImpactIncidentSource AzureDevops { get; } = new ImpactIncidentSource(AzureDevopsValue);
        /// <summary> When source of Incident is Microsoft ICM. </summary>
        public static ImpactIncidentSource Icm { get; } = new ImpactIncidentSource(IcmValue);
        /// <summary> When source of Incident is Jira. </summary>
        public static ImpactIncidentSource Jira { get; } = new ImpactIncidentSource(JiraValue);
        /// <summary> When source of Incident is ServiceNow. </summary>
        public static ImpactIncidentSource ServiceNow { get; } = new ImpactIncidentSource(ServiceNowValue);
        /// <summary> When source of Incident is Other. </summary>
        public static ImpactIncidentSource Other { get; } = new ImpactIncidentSource(OtherValue);
        /// <summary> Determines if two <see cref="ImpactIncidentSource"/> values are the same. </summary>
        public static bool operator ==(ImpactIncidentSource left, ImpactIncidentSource right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ImpactIncidentSource"/> values are not the same. </summary>
        public static bool operator !=(ImpactIncidentSource left, ImpactIncidentSource right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ImpactIncidentSource"/>. </summary>
        public static implicit operator ImpactIncidentSource(string value) => new ImpactIncidentSource(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ImpactIncidentSource other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ImpactIncidentSource other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
